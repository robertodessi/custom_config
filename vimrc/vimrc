call plug#begin()

Plug 'git@github.com:mhinz/vim-startify.git'
Plug 'git@github.com:vim-airline/vim-airline.git'
Plug 'git@github.com:airblade/vim-gitgutter.git'
Plug 'git@github.com:preservim/nerdtree.git'
Plug 'git@github.com:Yggdroot/indentLine.git'
Plug 'git@github.com:neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'git@github.com:github/copilot.vim'
Plug 'git@github.com:haystackandroid/snow'

" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" Plug 'junegunn/fzf.vim'
" Plug 'karoliskoncevicius/vim-sendtowindow'
" Plug 'git@github.com:nvie/vim-flake8.git'
" Plug 'git@github.com:dense-analysis/ale.git'
" Plug 'git@github.com:terryma/vim-multiple-cursors.git'

call plug#end()


"""""""""""""""""""
" PLUGIN SETTINGS "
"""""""""""""""""""
""""""
" coc.nvim 
""""""
set encoding=utf-8
set nobackup
set nowritebackup

set updatetime=300
set signcolumn=yes

set completeopt=menuone,noinsert,noselect
set shortmess+=c
set signcolumn=yes

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" function! s:check_back_space() abort
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <C-Space> coc#refresh()

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

""""""
" copilot
""""""
" imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")
" let g:copilot_no_tab_map = v:true

""""""
" FZF 
""""""
nnoremap <C-f> :FZF<CR>
let g:fzf_action = {
    \'ctrl-t': 'tab split',
    \ 'ctrl-i': 'split',
    \ 'ctrl-v': 'vsplit' }

""""""
" vim sendtowindow
""""""
nmap L <Plug>SendRight
xmap L <Plug>SendRightV
nmap H <Plug>SendLeft
xmap H <Plug>SendLeftV
nmap J <Plug>SendUp
xmap J <Plug>SendUpV
nmap K <Plug>SendDown
xmap K <Plug>SendDownV

""""""
" nerdtree
""""""
autocmd VimEnter * NERDTree | wincmd p
let NERDTreeShowHidden=1

" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if winnr() == winnr('h') && bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

let g:NERDTreeFileLines = 1

nnoremap <leader>n :NERDTreeFocus<CR>
"nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
" nnoremap <C-f> :NERDTreeFind<CR>

""""""
" vim-gitgutter
""""""
set updatetime=100


""""""""""""""""
" VIM SETTINGS "
""""""""""""""""
set backspace=indent,eol,start

set t_Co=256
colorscheme desert
highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE
set wincolor=NormalAlt
highlight Normal guibg=black
highlight NormalAlt guibg=black


set colorcolumn=120
let python_highlight_all=1
syntax on
set tabstop=4
set shiftwidth=4
set expandtab
set number
set cursorline
set foldmethod=indent

inoremap sd <Esc>
vnoremap w b
nnoremap w b
nnoremap 1 0
nnoremap 2 $
nnoremap ; :
nnoremap : ;
nnoremap ss :w<CR>
nnoremap sw :wq<CR>
" copy until end of line
nnoremap oo y$

set iskeyword-=_
set pastetoggle=<F3>

nnoremap k j
nnoremap j k

vnoremap k j
vnoremap j k

"split navigations
nnoremap <C-J> <C-W><C-K>
nnoremap <C-K> <C-W><C-J>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


let mapleader = "`"


"""""""""""""""""""""
" Terminal mappings "
"""""""""""""""""""""
nnoremap <leader>tm :term ++curwin<CR>
tmap <C-W>v <C-W>:vert term<CR>
tmap ww <C-W>N<CR>
tmap <C-W>p <C-W>""


"""""""""""""""""""""""""""
" Vuffer closing mappings "
"""""""""""""""""""""""""""
" Delete buffer while keeping window layout (don't close buffer's windows).
" Version 2008-11-18 from http://vim.wikia.com/wiki/VimTip165
if v:version < 700 || exists('loaded_bclose') || &cp
  finish
endif
let loaded_bclose = 1
if !exists('bclose_multiple')
  let bclose_multiple = 1
endif

" Display an error message.
function! s:Warn(msg)
  echohl ErrorMsg
  echomsg a:msg
  echohl NONE
endfunction

" Command ':Bclose' executes ':bd' to delete buffer in current window.
" The window will show the alternate buffer (Ctrl-^) if it exists,
" or the previous buffer (:bp), or a blank buffer if no previous.
" Command ':Bclose!' is the same, but executes ':bd!' (discard changes).
" An optional argument can specify which buffer to close (name or number).
function! s:Bclose(bang, buffer)
  if empty(a:buffer)
    let btarget = bufnr('%')
  elseif a:buffer =~ '^\d\+$'
    let btarget = bufnr(str2nr(a:buffer))
  else
    let btarget = bufnr(a:buffer)
  endif
  if btarget < 0
    call s:Warn('No matching buffer for '.a:buffer)
    return
  endif
  if empty(a:bang) && getbufvar(btarget, '&modified')
    call s:Warn('No write since last change for buffer '.btarget.' (use :Bclose!)')
    return
  endif
  " Numbers of windows that view target buffer which we will delete.
  let wnums = filter(range(1, winnr('$')), 'winbufnr(v:val) == btarget')
  if !g:bclose_multiple && len(wnums) > 1
    call s:Warn('Buffer is in multiple windows (use ":let bclose_multiple=1")')
    return
  endif
  let wcurrent = winnr()
  for w in wnums
    execute w.'wincmd w'
    let prevbuf = bufnr('#')
    if prevbuf > 0 && buflisted(prevbuf) && prevbuf != btarget
      buffer #
    else
      bprevious
    endif
    if btarget == bufnr('%')
      " Numbers of listed buffers which are not the target to be deleted.
      let blisted = filter(range(1, bufnr('$')), 'buflisted(v:val) && v:val != btarget')
      " Listed, not target, and not displayed.
      let bhidden = filter(copy(blisted), 'bufwinnr(v:val) < 0')
      " Take the first buffer, if any (could be more intelligent).
      let bjump = (bhidden + blisted + [-1])[0]
      if bjump > 0
        execute 'buffer '.bjump
      else
        execute 'enew'.a:bang
      endif
    endif
  endfor
  execute 'bdelete'.a:bang.' '.btarget
  execute wcurrent.'wincmd w'
endfunction
command! -bang -complete=buffer -nargs=? Bclose call <SID>Bclose(<q-bang>, <q-args>)

nnoremap <silent> <Leader>bd :Bclose<CR>
