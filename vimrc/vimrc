call plug#begin()

Plug 'git@github.com:mhinz/vim-startify.git'
Plug 'git@github.com:vim-airline/vim-airline.git'
Plug 'git@github.com:gruvbox-community/gruvbox.git'
Plug 'git@github.com:airblade/vim-gitgutter.git'
Plug 'git@github.com:preservim/nerdtree.git'
Plug 'git@github.com:preservim/vim-indent-guides.git'
Plug 'git@github.com:dense-analysis/ale.git'
Plug 'git@github.com:nvie/vim-flake8.git'

" Plug 'git@github.com:Yggdroot/indentLine.git'
" Plug 'git@github.com:terryma/vim-multiple-cursors.git'

call plug#end()

" ale for linting and fixing
"let g:ale_linters = {
"    \    'python': ['flake8']
"    \}
let g:ale_fixers = {
        \    '*': ['remove_trailing_lines', 'trim_whitespace'],
    \    'python': ['black', 'isort']
    \}

let g:ale_fix_on_save = 1
let g:ale_lint_on_save = 1

let g:ale_python_black_options = "-l 120"
let g:ale_python_flake8_options = '--max-line-length=120 --ignore=E203'


" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" nerdtree
autocmd VimEnter * NERDTree | wincmd p
let NERDTreeShowHidden=1

" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if winnr() == winnr('h') && bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

let g:NERDTreeFileLines = 1

nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

" gruvbox
colorscheme gruvbox

" vim-gitgutter
set updatetime=100

" vim-flake88
"autocmd BufWritePost *.py call flake8#Flake8()

"""""""""""""""""""""""""""""""""""""""""""""""

set colorcolumn=120

let python_highlight_all=1
syntax on

set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab

set number
set cursorline

set foldmethod=indent

inoremap sd <Esc>
vnoremap w b
nnoremap w b
nnoremap 1 0
"nnoremap 3 go till end of line and enter in insert mode
nnoremap 2 $
" <BS> is backspace i.e. delete key
"inoremap ` <BS>
"noremap ;; :

nnoremap ; :
nnoremap : ;


"inoremap ss <Esc>:w<CR>
nnoremap ss :w<CR>
"inoremap sw <Esc>:wq<CR>
nnoremap sw :wq<CR>

set iskeyword-=_

nnoremap k j
nnoremap j k

vnoremap k j
vnoremap j k

"split navigations
nnoremap <C-J> <C-W><C-K>
nnoremap <C-K> <C-W><C-J>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" copy until end of line
nnoremap oo y$

let mapleader = "`"

" nnoremap <leader>tm :belowright term<cr>
nnoremap <leader>tm :term ++curwin<CR>
tmap <C-W>v <C-W>:vert term<CR>
tmap ww <C-W>N<CR>
tmap <C-W>p <C-W>""
" nnoremap <CR> i

set pastetoggle=<F3>

" Delete buffer while keeping window layout (don't close buffer's windows).
" Version 2008-11-18 from http://vim.wikia.com/wiki/VimTip165
if v:version < 700 || exists('loaded_bclose') || &cp
  finish
endif
let loaded_bclose = 1
if !exists('bclose_multiple')
  let bclose_multiple = 1
endif

" Display an error message.
function! s:Warn(msg)
  echohl ErrorMsg
  echomsg a:msg
  echohl NONE
endfunction

" Command ':Bclose' executes ':bd' to delete buffer in current window.
" The window will show the alternate buffer (Ctrl-^) if it exists,
" or the previous buffer (:bp), or a blank buffer if no previous.
" Command ':Bclose!' is the same, but executes ':bd!' (discard changes).
" An optional argument can specify which buffer to close (name or number).
function! s:Bclose(bang, buffer)
  if empty(a:buffer)
    let btarget = bufnr('%')
  elseif a:buffer =~ '^\d\+$'
    let btarget = bufnr(str2nr(a:buffer))
  else
    let btarget = bufnr(a:buffer)
  endif
  if btarget < 0
    call s:Warn('No matching buffer for '.a:buffer)
    return
  endif
  if empty(a:bang) && getbufvar(btarget, '&modified')
    call s:Warn('No write since last change for buffer '.btarget.' (use :Bclose!)')
    return
  endif
  " Numbers of windows that view target buffer which we will delete.
  let wnums = filter(range(1, winnr('$')), 'winbufnr(v:val) == btarget')
  if !g:bclose_multiple && len(wnums) > 1
    call s:Warn('Buffer is in multiple windows (use ":let bclose_multiple=1")')
    return
  endif
  let wcurrent = winnr()
  for w in wnums
    execute w.'wincmd w'
    let prevbuf = bufnr('#')
    if prevbuf > 0 && buflisted(prevbuf) && prevbuf != btarget
      buffer #
    else
      bprevious
    endif
    if btarget == bufnr('%')
      " Numbers of listed buffers which are not the target to be deleted.
      let blisted = filter(range(1, bufnr('$')), 'buflisted(v:val) && v:val != btarget')
      " Listed, not target, and not displayed.
      let bhidden = filter(copy(blisted), 'bufwinnr(v:val) < 0')
      " Take the first buffer, if any (could be more intelligent).
      let bjump = (bhidden + blisted + [-1])[0]
      if bjump > 0
        execute 'buffer '.bjump
      else
        execute 'enew'.a:bang
      endif
    endif
  endfor
  execute 'bdelete'.a:bang.' '.btarget
  execute wcurrent.'wincmd w'
endfunction
command! -bang -complete=buffer -nargs=? Bclose call <SID>Bclose(<q-bang>, <q-args>)

nnoremap <silent> <Leader>bd :Bclose<CR>

"<C-W> c remove current split


"ctrl-w N to switch to terminal-normal mode, (i to go back to insert mode)
"ctrl-w : will open command mode like in regular Vim.
"ctrl-w "" will paste
