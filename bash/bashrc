# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export EDITOR=/usr/bin/vim
export CLICOLOR=16
export LSCOLORS=ExFxBxDxCxegedabagacad

#set t_Co=256

# ======
# Reminder:
# <command> | peco is an interactive filtering command
#
#   mdfind search using spotlight db (thus searching through data and metadata
# ====

#   ---------------------------------
#   1. ALIASES AND FUNCTIONS
#   ---------------------------------

alias p='python'
alias cp='cp -iv'                           # Preferred 'cp' implementation | -i asks for permission to overwrite | -v verbose
alias mv='mv -iv'                           # Preferred 'mv' implementation | -i asks for permission to overwrite | -v verbose
alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation | -p creates intermidiate directories if required
                                            # e.g. mkdir Desktop/foo/bar creates foo if it does not exists
alias ll='ls -FlAhp'                        # Preferred 'ls' implementation
alias less='less -FRXc'                     # Preferred 'less' implementation
cd() { builtin cd "$@"; ls; }               # Always list directory contents upon 'cd'
alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
alias ..='cd ../'                           # Go back 1 directory level
alias ...='cd ../../'                       # Go back 2 directory levels
alias ~="cd ~"                              # ~:            Go Home
alias c='clear'                             # c:            Clear terminal display
alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
mcd () { mkdir -p "$1" && cd "$1"; }        # mcd:          Makes new Dir and jumps inside
alias doc="less ~/.bashrc"                  # doc:          Show (using less) .bashrc
alias py="python -m pdb -c c"

#   ---------------------------
#   git aliases
#   ---------------------------

alias gadd='git add --all'
alias gcomm='git commit'
alias gpush='git push -u origin'
alias gs='git status'
alias gd='git diff'

#   ---------------------------
#    config files
#   ---------------------------

alias edit_config="vim ~/.bashrc"     # edit_config:  Opens this file with vim
alias doc_vim="less ~/.vimrc"
alias edit_vim="vim ~/.vimrc"
alias upd="source ~/.bashrc"          # upd:          Sources this file after edits has been made

alias pp="realpath"

#   ---------------------------
#    conda
#   ---------------------------

alias act="conda activate"
alias deact="conda deactivate"

#   ---------------------------
#    misc
#   ---------------------------

alias seal="cd /home/robertodessi/sealv2/sealv2"
alias scripts="cd /home/robertodessi/sealv2/scripts"
alias e="exit"
alias data="cd /mnt/data-gcp/internships/roberto/sealv2"
alias smi="nvidia-smi"


#   ---------------------------
#    screen
#   ---------------------------

#   kill_screen:    kill all detached screen sessions
#   ---------------------------

# kill_screen () { for session in $(screen -ls | grep -o '[0-9]\+') do screen -S "${session}" -X quit; done }

kill_screen () {
    for session in $(screen -ls | grep -o '[0-9]\{5\}')
    do
        screen -S "${session}" -X quit;
    done
}

alias sr="screen -r"
alias sl="screen -list"

#   ------------------------------------------------------------------------------------------------------------

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/robertodessi/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/robertodessi/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/robertodessi/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/robertodessi/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<



### BASH shortcuts
# CTRL+U to erase everything from the current cursor position to the beginning of the line.
# CTRL+K to erase everything from the current cursor position to the end of the line.

# CTRL+A moves the cursor to the beginning of the line.
# CTRL+E moves the cursor to the end of the line.

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
